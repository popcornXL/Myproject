/*
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.

*/

//方法一  出現Time Limit Exceeded
class Solution {
    public int maxProfit(int[] prices) {
        int max=0;//最大利潤
        for(int i=0;i<prices.length-1;i++){//買的價格
            for(int j=i+1;j<prices.length;j++){//賣的價格
                int aa=prices[j]-prices[i];//利潤
                 if(aa>max){ //利潤大於目前最大時，交換
                     max=aa;
                 }
            }
        }
        return max;
    }
}

方法二

class Solution {
    public int maxProfit(int[] prices) {
          if (prices == null || prices.length < 1) {
            return 0;
        }
        int min = prices[0]; //買入
        int profit = 0; //利潤

        for (int i = 1; i < prices.length; i++) {//買入價
            // 找更低的買入價
            if (min > prices[i]) {
                // 更新買入
                min = prices[i];
            } 
            // 價格不低於買入
            else {
                // 賣出大於買入
                if (profit < prices[i] - min) {
                    // 更新賣出
                    profit = prices[i] - min;
                } 
            }
        }

        return profit;
    }
}
